# vim: filetype=make

PROJECT_ROOT_DIRECTORY:=\"$(realpath .)\"

include $(MAKEFILE).config
include Makefile.config

LIBS+=cuda cudart
DEFS+=$(EDEFS) PROJECT_ROOT_DIRECTORY=$(PROJECT_ROOT_DIRECTORY)

LIBS  :=$(addprefix -l,$(LIBS))
DEFS  :=$(addprefix -D,$(DEFS))

C_SRCS   :=$(shell find $(SDIR) -name '*.c'  )
CXX_SRCS :=$(shell find $(SDIR) -name '*.cpp')
ASM_SRCS :=$(shell find $(SDIR) -name '*.S'  )
CUDA_SRCS:=$(shell find $(SDIR) -name '*.cu' )

C_OBJS   :=$(patsubst $(SDIR)/%.c,  $(ODIR)/%.o, $(C_SRCS)   )
CXX_OBJS :=$(patsubst $(SDIR)/%.cpp,$(ODIR)/%.o, $(CXX_SRCS) )
ASM_OBJS :=$(patsubst $(SDIR)/%.S,  $(ODIR)/%.o, $(ASM_SRCS) )
CUDA_OBJS:=$(patsubst $(SDIR)/%.cu, $(ODIR)/%.co,$(CUDA_SRCS))
OBJS     :=$(C_OBJS) $(CXX_OBJS) $(ASM_OBJS) $(CUDA_OBJS)

INC:=$(addprefix -I,$(IDIRS) $(LIB_IDIR))

CCFLAGS  :=$(WARNING) $(OPTIMIZATION) $(OPTIONS) $(INC) $(DEFS) -std=c99
CXXFLAGS :=$(WARNING) $(OPTIMIZATION) $(OPTIONS) $(INC) $(DEFS) -std=c++14
ASMFLAGS :=$(WARNING) $(OPTIMIZATION) $(OPTIONS) $(INC) $(DEFS)
NVCCFLAGS:=$(WARNING) $(OPTIMIZATION) $(OPTIONS) $(INC) $(DEFS) -Wno-pedantic
NVCCFLAGS:=$(addprefix -Xcompiler ,$(NVCCFLAGS))
LDFLAGS  :=$(WARNING) $(OPTIMIZATION) $(OPTIONS) -L$(LIB_LDIR) -L$(CUDA_LDIR) -Wl,-R$(LIB_LDIR) -Wl,--gc-sections

.SECONDARY: $(OBJS)

.PHONY: all
all: $(ELF)
	@echo "> BULDING"
	$(OBJCOPY) -j .data -j .text -O ihex   $(ELF)   $(HEX)
	$(OBJCOPY) -j .data -j .text -O binary $(ELF)   $(BIN)
	$(OBJDUMP) -DCz                        $(ELF) > $(ASM)
	$(SIZE) $(HEX) | sed -e 's/^/* /'
	@echo "< BUILDING DONE"

$(ELF): $(OBJS)
	@echo "> LINKING"
	$(LD) $(LDFLAGS) $^ $(LIBS) -o $@
	@echo "< LINKING DONE"

$(ODIR)/%.o:  $(SDIR)/%.c
	@echo "> COMPILING: $<"
	$(CC)   $(CCFLAGS) -c $< -o $@
	@echo "< COMPILING: $< DONE"
$(ODIR)/%.o:  $(SDIR)/%.cpp
	@echo "> COMPILING: $<"
	$(CXX)  $(CXXFLAGS) -c $< -o $@
	@echo "< COMPILING: $< DONE"
$(ODIR)/%.o:  $(SDIR)/%.S
	@echo "> COMPILING: $<"
	$(ASMC) $(ASMFLAGS) -c $< -o $@
	@echo "< COMPILING: $< DONE"
$(ODIR)/%.co: $(SDIR)/%.cu
	@echo "> COMPILING: $<"
	$(NVCC) $(NVCCFLAGS) -c $< -o $@
	@echo "< COMPILING: $< DONE"

$(DDIR)/%.d:  $(SDIR)/%.c
	@echo "> BUILDING DEPENDENCY: $<"
	$(CC)   $(INC) -MM $< -MT '$(patsubst $(DDIR)/%.d,$(ODIR)/%.o,$@)'   > $@
	@echo "< BUILDING DEPENDENCY: $< DONE"
$(DDIR)/%.d:  $(SDIR)/%.cpp
	@echo "> BUILDING DEPENDENCY: $<"
	$(CXX)  $(INC) -MM $< -MT '$(patsubst $(DDIR)/%.d,$(ODIR)/%.o,$@)'   > $@
	@echo "< BUILDING DEPENDENCY: $< DONE"
$(DDIR)/%.d:  $(SDIR)/%.S
	@echo "> BUILDING DEPENDENCY: $<"
	$(ASMC) $(INC) -MM $< -MT '$(patsubst $(DDIR)/%.d,$(ODIR)/%.o,$@)'   > $@
	@echo "< BUILDING DEPENDENCY: $< DONE"
$(DDIR)/%.cd: $(SDIR)/%.cu
	@echo "> BUILDING DEPENDENCY: $<"
	$(NVCC) $(INC) -MM $< -MT '$(patsubst $(DDIR)/%.cd,$(ODIR)/%.co,$@)' > $@
	@echo "< BUILDING DEPENDENCY: $< DONE"

.PHONY: setup
setup:
	@echo "> MAKING DIRECTORIES"
	mkdir -p $(BDIR) $(ODIR) $(DDIR) $(IDIRS) $(SDIR)
	touch $(BDIR)/.empty $(ODIR)/.empty $(DDIR)/.empty
	@echo "< MAKING DIRECTORIES DONE"

.PHONY: bear
bear:
	@better-bear $(SDIR) $(IDIRS)

.PHONY: clean
clean: CLEAN_FILES:=./$(ELF) ./$(HEX) ./$(BIN) ./$(ASM) $(shell find ./$(ODIR) ./$(DDIR) -type f -name '[!.]*')
clean:
	@echo "> CLEANING"
	-rm -vf $(shell echo $(CLEAN_FILES) | tr " " "\n" | sort) | sed -e 's/^/* /'
	@echo "< CLEANING DONE"

ifeq ($(NO_DEPENDENCIES),)
-include $(patsubst $(SDIR)/%.c,  $(DDIR)/%.d, $(C_SRCS)   )
-include $(patsubst $(SDIR)/%.cpp,$(DDIR)/%.d, $(CXX_SRCS) )
-include $(patsubst $(SDIR)/%.S,  $(DDIR)/%.d, $(ASM_SRCS) )
-include $(patsubst $(SDIR)/%.cu, $(DDIR)/%.cd,$(CUDA_SRCS))
endif
