# vim: filetype=make

LNAME:=$(notdir $(realpath .))

include $(MAKEFILE).config
include Makefile.config

PIDIR:=inc/$(LNAME)

ARC:=$(LLDIR)/lib$(LNAME).a
SO :=$(LLDIR)/lib$(LNAME).so

DEFS+=$(EDEFS)

PHEADERS:=$(shell find $(PIDIR) -name '*.h' )
PHEADERS+=$(shell find $(PIDIR) -name '*.cuh')
PHEADERS:=$(patsubst $(PIDIR)/%,$(LIDIR)/$(LNAME)/%,$(PHEADERS))

C_SRCS   :=$(shell find $(SDIR) -name '*.c'  )
CXX_SRCS :=$(shell find $(SDIR) -name '*.cpp')
ASM_SRCS :=$(shell find $(SDIR) -name '*.S'  )
CUDA_SRCS:=$(shell find $(SDIR) -name '*.cu' )

C_OBJS   :=$(patsubst $(SDIR)/%.c,  $(ODIR)/%.o,  $(C_SRCS)   )
CXX_OBJS :=$(patsubst $(SDIR)/%.cpp,$(ODIR)/%.o,  $(CXX_SRCS) )
ASM_OBJS :=$(patsubst $(SDIR)/%.S,  $(ODIR)/%.o,  $(ASM_SRCS) )
CUDA_OBJS:=$(patsubst $(SDIR)/%.cu, $(ODIR)/%.cuo,$(CUDA_SRCS))
OBJS:=$(C_OBJS) $(CXX_OBJS) $(ASM_OBJS) $(CUDA_OBJS)
ARC_MEMBERS:=$(OBJS)

IDIRS+=$(LIDIR)
IDIRS+=$(PIDIR)
INC:=$(addprefix -I,$(IDIRS))

CCFLAGS  :=$(WARNING) $(OPTIMIZATION) $(DEBUG) $(INC) $(DEFS) -fPIC -std=c99
CXXFLAGS :=$(WARNING) $(OPTIMIZATION) $(DEBUG) $(INC) $(DEFS) -fPIC -std=c++14
ASMFLAGS :=$(WARNING) $(OPTIMIZATION) $(DEBUG) $(INC) $(DEFS) -fPIC
NVCCFLAGS:=$(WARNING) $(OPTIMIZATION) $(DEBUG) $(INC) $(DEFS) -fPIC -Wno-pedantic
NVCCFLAGS:=$(addprefix -Xcompiler ,$(NVCCFLAGS))
SOFLAGS  :=$(WARNING) $(OPTIMIZATION) -shared
ARFLAGS  :=rUucv

.SECONDARY: $(OBJS)

.PHONY: all
all:
	echo $(PHEADERS)
	make limited_jobs -j1

.PHONY: limited_jobs
limited_jobs: $(SO) $(PHEADERS)
	@echo "> BULDING $(LNAME) FOR $(shell uname -sm)"
	$(SIZE) $(ARC) -t | sed -e 's/^/* /'
	@echo '*'
	$(SIZE) $(SO)  | sed -e 's/^/* /'
	@echo "< BULDING $(LNAME) FOR $(shell uname -sm) DONE"

$(SO): $(ARC)
	@echo "> COMPILING INTO SHARED LIBRARY"
	$(CXX) $(SOFLAGS) -Wl,--whole-archive $(ARC) -Wl,--no-whole-archive -o $(SO)
	@echo "> COMPILING INTO SHARED LIBRARY DONE"

$(ARC): $(ARC)($(ARC_MEMBERS))
	@echo "> UPDATING ARCHIVE SYMBOL DIRECTORY"
	$(RANLIB) $@
	@echo "> UPDATING ARCHIVE SYMBOL DIRECTORY DONE"

$(ARC)(%.o): $(ODIR)/%.o
	@echo "> ARCHIVING $<"
	$(AR) $(ARFLAGS) $@ $<
	@echo "< ARCHIVING $< DONE"
$(ARC)(%.cuo): $(ODIR)/%.cuo
	@echo "> ARCHIVING $<"
	$(AR) $(ARFLAGS) $@ $<
	@echo "< ARCHIVING $< DONE"

$(LIDIR)/$(LNAME)/%.h: $(PIDIR)/%.h
	@echo "> STORING PUBLIC LIBRARY HEADER $<"
	mkdir -p $(dir $@) && cp $< $@
	@echo "< STORING PUBLIC LIBRARY HEADER $< DONE"
$(LIDIR)/$(LNAME)/%.cuh: $(PIDIR)/%.cuh
	@echo "> STORING PUBLIC LIBRARY HEADER $<"
	mkdir -p $(dir $@) && cp $< $@
	@echo "< STORING PUBLIC LIBRARY HEADER $< DONE"

$(ODIR)/%.o: $(SDIR)/%.c
	@echo "> COMPILING $<"
	$(CC)   $(CCFLAGS)   -c $< -o $@
	@echo "< COMPILING $< DONE"
$(ODIR)/%.o: $(SDIR)/%.cpp
	@echo "> COMPILING $<"
	$(CXX)  $(CXXFLAGS)  -c $< -o $@
	@echo "< COMPILING $< DONE"
$(ODIR)/%.o: $(SDIR)/%.S
	@echo "> COMPILING $<"
	$(ASMC) $(ASMFLAGS)  -c $< -o $@
	@echo "< COMPILING $< DONE"
$(ODIR)/%.cuo: $(SDIR)/%.cu
	@echo "> COMPILING: $<"
	$(NVCC) $(NVCCFLAGS) -c $< -o $@
	@echo "< COMPILING: $< DONE"

$(DDIR)/%.d: $(SDIR)/%.c
	@echo "> BUILDING DEPENDENCIES $<"
	$(CC)   $(INC) -MM $< -MT '$(patsubst $(DDIR)/%.d,$(ODIR)/%.o,$@)'     > $@
	@echo "< BUILDING DEPENDENCIES $< DONE"
$(DDIR)/%.d: $(SDIR)/%.cpp
	@echo "> BUILDING DEPENDENCIES $<"
	$(CXX)  $(INC) -MM $< -MT '$(patsubst $(DDIR)/%.d,$(ODIR)/%.o,$@)'     > $@
	@echo "< BUILDING DEPENDENCIES $< DONE"
$(DDIR)/%.d: $(SDIR)/%.S
	@echo "> BUILDING DEPENDENCIES $<"
	$(ASMC) $(INC) -MM $< -MT '$(patsubst $(DDIR)/%.d,$(ODIR)/%.o,$@)'     > $@
	@echo "< BUILDING DEPENDENCIES $< DONE"
$(DDIR)/%.cud: $(SDIR)/%.cu
	@echo "> BUILDING DEPENDENCY: $<"
	$(NVCC) $(INC) -MM $< -MT '$(patsubst $(DDIR)/%.cud,$(ODIR)/%.cuo,$@)' > $@
	@echo "< BUILDING DEPENDENCY: $< DONE"

.PHONY: bear
bear:
	@better-bear $(SDIR) $(IDIRS)

.PHONY: clean
clean: CLEAN_FILES:=$(ARC) $(SO) $(LIDIR)/$(LNAME) $(shell find ./$(ODIR) ./$(DDIR) -type f -name '[!.]*')
clean:
	@echo "> CLEANING"
	-rm -vfr $(shell echo $(CLEAN_FILES) | tr " " "\n") | sort | sed -e 's/^/* /'
	@echo "< CLEANING DONE"

%/:
	mkdir -p $(dir $@)

ifeq ($(NO_DEPENDENCIES),)
-include $(patsubst $(SDIR)/%.c,  $(DDIR)/%.d,  $(C_SRCS)   )
-include $(patsubst $(SDIR)/%.cpp,$(DDIR)/%.d,  $(CXX_SRCS) )
-include $(patsubst $(SDIR)/%.S,  $(DDIR)/%.d,  $(ASM_SRCS) )
-include $(patsubst $(SDIR)/%.cu, $(DDIR)/%.cud,$(CUDA_SRCS))
endif
